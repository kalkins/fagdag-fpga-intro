#+TITLE:     Intro til FPGA
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  no
#+DATE:
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+LaTeX_HEADER: \setminted{fontsize=\footnotesize}
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

* Intro :ignore:
** Hva
*** Hva er en FPGA?
* Verilog
** Modul
*** Modul
#+BEGIN_SRC verilog
module test ();
endmodule
#+END_SRC

*** Modul I/O
#+BEGIN_SRC verilog
module test (
   input in,
   output out
);

   assign out = in;

endmodule
#+END_SRC

*** Modul I/O
#+BEGIN_SRC verilog
module sum (
   input  a,
   input  b,
   output out
);

   assign out = a + b;

endmodule
#+END_SRC

*** Modul I/O
#+BEGIN_SRC verilog
module sum (
   input  a,
   input  b,
   output out
);

   wire   result = a + b;

   assign out = result;

endmodule
#+END_SRC

*** Modul I/O bredde
#+BEGIN_SRC verilog
module sum (
   input  [7:0] a,
   input  [7:0] b,
   output [8:0] out
);

   assign out = a + b;

endmodule
#+END_SRC

*** Submodul
**** Modul :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC verilog
// out = (a + b)^2
module squaredsum (
  input  [7:0] a,
  input  [7:0] b,
  output [8:0] out
);

   wire [14:0] sum;

   sum sum_mod (
      .a   (a),
      .b   (b),
      .sum (sum)
   );

   multiply square_mod (
      .a   (sum),
      .b   (sum),
      .sum (out)
   );

endmodule
#+END_SRC

**** Submodul :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC verilog
module sum (
   input  [7:0] a,
   input  [7:0] b,
   output [8:0] sum
);

   assign sum = a + b;

endmodule

module multiply (
   input  [7:0] a,
   input  [7:0] b,
   output [14:0] product
);

   assign product = a * b;

endmodule
#+END_SRC

** Sekvensiell logikk
*** Sekvensiell logikk
#+BEGIN_SRC verilog
module test ();

   wire count = count + 1;

endmodule
#+END_SRC

*** Sekvensiell logikk
#+BEGIN_SRC verilog
module test (
   input        clk,
   output [7:0] count
);

   reg [7:0] count_reg = 0;

   assign count = reg;

   always @(posedge clk) begin
      count_reg <= count_reg + 1;
   end

endmodule
#+END_SRC

*** Sekvensiell logikk
#+BEGIN_SRC verilog
module test (
   input            clk,
   output reg [7:0] count
);

   always @(posedge clk) begin
      count <= count + 1;
   end

endmodule
#+END_SRC

*** Sekvensiell logikk reset
#+BEGIN_SRC verilog
module test (
   input            clk,
   input            rst_n,
   output reg [7:0] count
);

   always @(posedge clk or negedge rst_n) begin
      if (~rst_n) begin
         count <= 0;
      end else begin
         count <= count + 1;
      end
   end

endmodule
#+END_SRC

*** Fibonacci
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC verilog
module test (
   input        clk,
   input        rst_n,
   output [7:0] fib
);

   reg [7:0] a = 0;
   reg [7:0] b = 0;

   assign fib = b;

   always @(posedge clk or negedge rst_n) begin
      if (~rst_n) begin
         a <= 0;
         b <= 0;
      end else begin
         a <= b;
         b <= a + b;
      end
   end

endmodule
#+END_SRC
